/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { useViewportScroll } from "framer-motion";
import { darken } from "polished";
import { useShoeProps } from "../stores/shoe";

type GLTFResult = GLTF & {
  nodes: {
    shoe: THREE.Mesh;
    shoe_1: THREE.Mesh;
    shoe_2: THREE.Mesh;
    shoe_3: THREE.Mesh;
    shoe_4: THREE.Mesh;
    shoe_5: THREE.Mesh;
    shoe_6: THREE.Mesh;
    shoe_7: THREE.Mesh;
  };
  materials: {
    laces: THREE.MeshStandardMaterial;
    mesh: THREE.MeshStandardMaterial;
    caps: THREE.MeshStandardMaterial;
    inner: THREE.MeshStandardMaterial;
    sole: THREE.MeshStandardMaterial;
    stripes: THREE.MeshStandardMaterial;
    band: THREE.MeshStandardMaterial;
    patch: THREE.MeshStandardMaterial;
  };
};

const colorsDefault = {
  laces: { color: "#FFFFFF", intensity: 0, idealIntensity: 0 },
  mesh: { color: "#212121", intensity: 0, idealIntensity: 0 },
  caps: { color: "#FFFFFF", intensity: 0, idealIntensity: 0 },
  inner: { color: "#FFFFFF", intensity: 0, idealIntensity: 0 },
  sole: { color: "#FFFFFF", intensity: 0, idealIntensity: 0 },
  stripes: { color: "#5a5a5a", intensity: 0, idealIntensity: 0 },
  band: { color: "#FFFFFF", intensity: 0, idealIntensity: 0 },
  patch: { color: "#FFFFFF", intensity: 0, idealIntensity: 0 },
};

const selectPart = (part: keyof typeof colorsDefault | null) => {
  const colorsClone = { ...colorsDefault };
  Object.entries(colorsClone).forEach(([key, value]) => {
    if (part === null) {
      value.idealIntensity = 0;
      return;
    }

    if (key === part) {
      value.idealIntensity = 0;
    } else {
      value.idealIntensity = 1;
    }
  });
  return colorsClone;
};

const Model = ({ ...props }: JSX.IntrinsicElements["group"]) => {
  const {
    color,
    position,
    rotation,
    update,
    changePosition,
    changeRotation,
    resetRotation,
  } = useShoeProps();
  const group = useRef<THREE.Group>();
  const { scrollYProgress } = useViewportScroll();

  const [colors, setColors] = useState(colorsDefault);

  const resolveColor = () => {
    const newColors = {} as typeof colorsDefault;
    Object.entries(colors).forEach(([key, value]) => {
      if (value.intensity.toFixed(2) > value.idealIntensity.toFixed(2)) {
        value.intensity = value.intensity - 0.1;
      } else if (value.intensity.toFixed(2) < value.idealIntensity.toFixed(2)) {
        value.intensity += 0.1;
      } else {
        value.intensity = value.idealIntensity;
      }

      newColors[key as keyof typeof colorsDefault] = {
        ...value,
        color:
          value.intensity === 0
            ? value.color
            : darken(value.intensity, value.color),
      };
    });
  };

  const [animationTimer, setAnimationTimer] = useState(0);
  scrollYProgress.onChange((value) => {
    if (value < 0.2934) {
      setAnimationTimer(0);
    } else if (value < 0.4268) {
      setAnimationTimer(1);
    } else if (value < 0.5602) {
      setAnimationTimer(2);
    } else if (value < 0.6937) {
      setAnimationTimer(3);
    } else if (value < 0.8271) {
      setAnimationTimer(4);
    } else if (value < 0.9605) {
      setAnimationTimer(5);
    }
  });

  useFrame((state) => {
    const timer = state.clock.getElapsedTime();
    if (group.current) {
      group.current.rotation.z =
        -0.2 - (1 + Math.sin(timer / 1.5)) / 20 - rotation.z.current;
      group.current.rotation.x = Math.cos(timer / 4) / 8 + rotation.x.current;
      group.current.rotation.y = rotation.y.current;

      group.current.position.y =
        (1 + Math.sin(timer / 1.5)) / 10 - position.y.current;
      group.current.position.x = position.x.current;
      group.current.position.z = position.z.current;
    }
    update();
    resolveColor();
  });

  useEffect(() => {
    if (!animationTimer) {
      setColors(selectPart(null));
      resetRotation();
      changePosition({ x: 0, y: 0, z: 0 });
    } else if (animationTimer === 1) {
      setColors(selectPart("stripes"));
      changeRotation({ y: 0 });
      changePosition({ z: 0.5 });
    } else if (animationTimer === 2) {
      setColors(selectPart("sole"));
      changeRotation({ y: 1 });
      changePosition({ z: 0.2 });
    } else if (animationTimer === 3) {
      setColors(selectPart("laces"));
      changeRotation({ y: -1.5, x: 0 });
      changePosition({ y: 0, z: 0.5 });
    } else if (animationTimer === 4) {
      setColors(selectPart("inner"));
      changeRotation({ y: -1.5, x: 1.5 });
      changePosition({ y: 0.5, z: 0.5 });
    } else if (animationTimer === 5) {
      setColors(selectPart(null));
      changeRotation({ y: 0, x: 0 });
      changePosition({ y: 0, x: 0, z: 0 });
    }
  }, [animationTimer]); // eslint-disable-line react-hooks/exhaustive-deps

  const screenGroupRef = useRef<THREE.Group>(null);
  useEffect(() => {
    window.addEventListener("resize", () => {
      if (screenGroupRef.current) {
        const scale = Math.pow(window.innerWidth / 1080, 0.5);
        screenGroupRef.current.scale.set(scale * 0.8, scale * 0.8, scale * 0.8);
      }
    });
  });

  const { nodes, materials } = useGLTF("/shoe-draco.glb") as any;
  return (
    <group ref={screenGroupRef}>
      <group ref={group} {...props} dispose={null}>
        <mesh
          geometry={nodes.shoe.geometry}
          material={materials.laces}
          material-color={darken(colors.laces.intensity, colors.laces.color)}
        />
        <mesh
          geometry={nodes.shoe_1.geometry}
          material={materials.mesh}
          material-color={darken(colors.mesh.intensity, color)}
        />
        <mesh
          geometry={nodes.shoe_2.geometry}
          material={materials.caps}
          material-color={darken(colors.caps.intensity, colors.caps.color)}
        />
        <mesh
          geometry={nodes.shoe_3.geometry}
          material={materials.inner}
          material-color={darken(colors.inner.intensity, colors.inner.color)}
        />
        <mesh
          geometry={nodes.shoe_4.geometry}
          material={materials.sole}
          material-color={darken(colors.sole.intensity, colors.sole.color)}
        />
        <mesh
          geometry={nodes.shoe_5.geometry}
          material={materials.stripes}
          material-color={darken(colors.stripes.intensity, color)}
        />
        <mesh
          geometry={nodes.shoe_6.geometry}
          material={materials.band}
          material-color={darken(colors.band.intensity, colors.band.color)}
        />
        <mesh
          geometry={nodes.shoe_7.geometry}
          material={materials.patch}
          material-color={darken(colors.patch.intensity, colors.patch.color)}
        />
      </group>
    </group>
  );
};

export default Model;

useGLTF.preload("/shoe-draco.glb");
